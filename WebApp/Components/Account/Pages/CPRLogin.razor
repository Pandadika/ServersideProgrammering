@page "/Account/CPRLogin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using WebApp.Data
@using WebApp.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject IServiceProvider ServiceProvider;
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager;
@inject RoleManager<IdentityRole> RoleManager;
@inject UserHandler UserHandler

@attribute [Authorize(Policy = "NotCprAuthenticatedUser")]

<style>
  .centered-container {
    display: flex;
    justify-content: center; /* Center horizontally */
    align-items: center; /* Center vertically */
    height: 10vh; /* Full viewport height */
  }

  .content {
    text-align: left; /* Optional: Center text inside the content div */
  }
</style>

<PageTitle>CPR Login</PageTitle>

<div class="row centered-container">
  <div class="col-md-4">
    <section>
      <StatusMessage Message="@errorMessage" />
      <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
          <InputText @bind-Value="Input.CPR" class="form-control" aria-required="true" />
          <label for="cpr" class="form-label">CPR</label>
          <ValidationMessage For="() => Input.CPR" class="text-danger" />
        </div>
        <div>
          <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </div>
      </EditForm>
    </section>
  </div>
</div>

@code {
  private string? errorMessage;

  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  [SupplyParameterFromQuery]
  private string? Email { get; set; }

  private string? username;

  protected override async Task OnInitializedAsync()
  {
    base.OnInitialized();
    var user = (await AuthStat).User;
    username = user.Identity?.Name;
    if (user != null && username != null) // Hack to remove claims when checking for cpr, otherwise when you logout and in again you still have your claims
    {
      var appuser = await UserManager.FindByEmailAsync(username);
      await UserManager.RemoveClaimsAsync(appuser, GetClaims("CprVerified"));
      await SignInManager.RefreshSignInAsync(appuser);
    }
  }

  public async Task LoginUser()
  {
    //check cpr
    Logger.LogInformation($"User email {Email}");
    if (Email == null)
    {
      if (username == null)
      {
        RedirectManager.RedirectTo(ReturnUrl);
      }
      Email = username;
    }

    // SHA256 hashing check
    //var result = await UserHandler.CheckCpr(Email, Input.CPR);

    // if (result)
    // {
    //   Logger.LogInformation("User logged in.");
    //   await AddClaim(Email, "CprVerified");
    //   RedirectManager.RedirectTo(ReturnUrl);
    // }
    // else
    // {
    //   errorMessage = "Error: Invalid CPR.";
    // }


    // Bcrypt hashing check
    var result = await UserHandler.TrySetCprBecrypt(Email, Input.CPR);

    if (result)
    {
      Logger.LogInformation("User logged in.");
      await AddClaim(Email, "CprVerified");
      RedirectManager.RedirectTo(ReturnUrl);
    }
    else if (await UserHandler.CheckCprBcrypt(Email, Input.CPR))
    {
      Logger.LogInformation("User logged in.");
      await AddClaim(Email, "CprVerified");
      RedirectManager.RedirectTo(ReturnUrl);
      
    }
    else
    {
      errorMessage = "Error: Invalid CPR.";
    }
  }

  private sealed class InputModel
  {
    [Required]
    [StringLength(10)]
    public string CPR { get; set; } = "";
  }

  public async Task AddClaim(string email, string claim)
  {
    var user = await UserManager.FindByEmailAsync(email);
    if (user == null)
    {
      throw new Exception("User not found.");
    }
    var claims = GetClaims("CprVerified");

    await UserManager.AddClaimsAsync(user, claims);
    await SignInManager.RefreshSignInAsync(user);
  }

  public List<Claim> GetClaims(string claim)
  {
    return new List<Claim>
      {
          new Claim(claim, "true")
      };
  }
}
